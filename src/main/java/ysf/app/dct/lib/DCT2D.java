package ysf.app.dct.lib;

public class DCT2D {

    // Define a 16x16 1D DCT basis (each ROW is a vector of the forward transform basis).
    private static float[][] DCTbasis16 = {
        {
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f,
            0.25000000000000000000000000000000000000000000000000f
        },
        {
            0.35185093438159564804834644746733829379081726074219f,
            0.33832950029358815902114088203234132379293441772461f,
            0.31180625324666783049210039280296768993139266967773f,
            0.27330046675043939696791994720115326344966888427734f,
            0.22429189658565909515353098413470434024930000305176f,
            0.16666391461943663721001485100714489817619323730469f,
            0.10263113188058936575686175274313427507877349853516f,
            0.03465429229977286945674208595846721436828374862671f,
            -0.03465429229977286945674208595846721436828374862671f,
            -0.10263113188058936575686175274313427507877349853516f,
            -0.16666391461943663721001485100714489817619323730469f,
            -0.22429189658565909515353098413470434024930000305176f,
            -0.27330046675043939696791994720115326344966888427734f,
            -0.31180625324666783049210039280296768993139266967773f,
            -0.33832950029358815902114088203234132379293441772461f,
            -0.35185093438159564804834644746733829379081726074219f
        },
        {
            0.34675996133053688108560663749813102185726165771484f,
            0.29396890060483971129912106334813870489597320556641f,
            0.19642373959677555950165128706430550664663314819336f,
            0.06897484482073575062788250988887739367783069610596f,
            -0.06897484482073575062788250988887739367783069610596f,
            -0.19642373959677555950165128706430550664663314819336f,
            -0.29396890060483971129912106334813870489597320556641f,
            -0.34675996133053688108560663749813102185726165771484f,
            -0.34675996133053688108560663749813102185726165771484f,
            -0.29396890060483971129912106334813870489597320556641f,
            -0.19642373959677555950165128706430550664663314819336f,
            -0.06897484482073575062788250988887739367783069610596f,
            0.06897484482073575062788250988887739367783069610596f,
            0.19642373959677555950165128706430550664663314819336f,
            0.29396890060483971129912106334813870489597320556641f,
            0.34675996133053688108560663749813102185726165771484f
        },
        {
            0.33832950029358815902114088203234132379293441772461f,
            0.22429189658565906739795536850579082965850830078125f,
            0.03465429229977286251784818205123883672058582305908f,
            -0.16666391461943663721001485100714489817619323730469f,
            -0.31180625324666783049210039280296768993139266967773f,
            -0.35185093438159559253719521620951127260923385620117f,
            -0.27330046675043934145676871594332624226808547973633f,
            -0.10263113188058933800128613711422076448798179626465f,
            0.10263113188058933800128613711422076448798179626465f,
            0.27330046675043934145676871594332624226808547973633f,
            0.35185093438159559253719521620951127260923385620117f,
            0.31180625324666783049210039280296768993139266967773f,
            0.16666391461943663721001485100714489817619323730469f,
            -0.03465429229977286251784818205123883672058582305908f,
            -0.22429189658565906739795536850579082965850830078125f,
            -0.33832950029358815902114088203234132379293441772461f
        },
        {
            0.32664074121909414394338000420248135924339294433594f,
            0.13529902503654925305376366395648801699280738830566f,
            -0.13529902503654925305376366395648801699280738830566f,
            -0.32664074121909414394338000420248135924339294433594f,
            -0.32664074121909414394338000420248135924339294433594f,
            -0.13529902503654925305376366395648801699280738830566f,
            0.13529902503654925305376366395648801699280738830566f,
            0.32664074121909414394338000420248135924339294433594f,
            0.32664074121909414394338000420248135924339294433594f,
            0.13529902503654925305376366395648801699280738830566f,
            -0.13529902503654925305376366395648801699280738830566f,
            -0.32664074121909414394338000420248135924339294433594f,
            -0.32664074121909414394338000420248135924339294433594f,
            -0.13529902503654925305376366395648801699280738830566f,
            0.13529902503654925305376366395648801699280738830566f,
            0.32664074121909414394338000420248135924339294433594f
        },
        {
            0.31180625324666783049210039280296768993139266967773f,
            0.03465429229977286251784818205123883672058582305908f,
            -0.27330046675043939696791994720115326344966888427734f,
            -0.33832950029358821453229211329016834497451782226562f,
            -0.10263113188058936575686175274313427507877349853516f,
            0.22429189658565906739795536850579082965850830078125f,
            0.35185093438159564804834644746733829379081726074219f,
            0.16666391461943663721001485100714489817619323730469f,
            -0.16666391461943663721001485100714489817619323730469f,
            -0.35185093438159564804834644746733829379081726074219f,
            -0.22429189658565906739795536850579082965850830078125f,
            0.10263113188058936575686175274313427507877349853516f,
            0.33832950029358821453229211329016834497451782226562f,
            0.27330046675043939696791994720115326344966888427734f,
            -0.03465429229977286251784818205123883672058582305908f,
            -0.31180625324666783049210039280296768993139266967773f
        },
        {
            0.29396890060483971129912106334813870489597320556641f,
            -0.06897484482073579226124593333224765956401824951172f,
            -0.34675996133053688108560663749813102185726165771484f,
            -0.19642373959677553174607567143539199605584144592285f,
            0.19642373959677553174607567143539199605584144592285f,
            0.34675996133053688108560663749813102185726165771484f,
            0.06897484482073579226124593333224765956401824951172f,
            -0.29396890060483971129912106334813870489597320556641f,
            -0.29396890060483971129912106334813870489597320556641f,
            0.06897484482073579226124593333224765956401824951172f,
            0.34675996133053688108560663749813102185726165771484f,
            0.19642373959677553174607567143539199605584144592285f,
            -0.19642373959677553174607567143539199605584144592285f,
            -0.34675996133053688108560663749813102185726165771484f,
            -0.06897484482073579226124593333224765956401824951172f,
            0.29396890060483971129912106334813870489597320556641f
        },
        {
            0.27330046675043939696791994720115326344966888427734f,
            -0.16666391461943663721001485100714489817619323730469f,
            -0.33832950029358821453229211329016834497451782226562f,
            0.03465429229977287639563598986569559201598167419434f,
            0.35185093438159564804834644746733829379081726074219f,
            0.10263113188058935187907394492867751978337764739990f,
            -0.31180625324666783049210039280296768993139266967773f,
            -0.22429189658565909515353098413470434024930000305176f,
            0.22429189658565909515353098413470434024930000305176f,
            0.31180625324666783049210039280296768993139266967773f,
            -0.10263113188058935187907394492867751978337764739990f,
            -0.35185093438159564804834644746733829379081726074219f,
            -0.03465429229977287639563598986569559201598167419434f,
            0.33832950029358821453229211329016834497451782226562f,
            0.16666391461943663721001485100714489817619323730469f,
            -0.27330046675043939696791994720115326344966888427734f
        },
        {
            0.25000000000000005551115123125782702118158340454102f,
            -0.25000000000000005551115123125782702118158340454102f,
            -0.25000000000000005551115123125782702118158340454102f,
            0.25000000000000005551115123125782702118158340454102f,
            0.25000000000000005551115123125782702118158340454102f,
            -0.25000000000000005551115123125782702118158340454102f,
            -0.25000000000000005551115123125782702118158340454102f,
            0.25000000000000005551115123125782702118158340454102f,
            0.25000000000000005551115123125782702118158340454102f,
            -0.25000000000000005551115123125782702118158340454102f,
            -0.25000000000000005551115123125782702118158340454102f,
            0.25000000000000005551115123125782702118158340454102f,
            0.25000000000000005551115123125782702118158340454102f,
            -0.25000000000000005551115123125782702118158340454102f,
            -0.25000000000000005551115123125782702118158340454102f,
            0.25000000000000005551115123125782702118158340454102f
        },
        {
            0.22429189658565909515353098413470434024930000305176f,
            -0.31180625324666783049210039280296768993139266967773f,
            -0.10263113188058937963464956055759103037416934967041f,
            0.35185093438159564804834644746733829379081726074219f,
            -0.03465429229977282088448475860786857083439826965332f,
            -0.33832950029358815902114088203234132379293441772461f,
            0.16666391461943658169886361974931787699460983276367f,
            0.27330046675043934145676871594332624226808547973633f,
            -0.27330046675043934145676871594332624226808547973633f,
            -0.16666391461943658169886361974931787699460983276367f,
            0.33832950029358815902114088203234132379293441772461f,
            0.03465429229977282088448475860786857083439826965332f,
            -0.35185093438159564804834644746733829379081726074219f,
            0.10263113188058937963464956055759103037416934967041f,
            0.31180625324666783049210039280296768993139266967773f,
            -0.22429189658565909515353098413470434024930000305176f
        },
        {
            0.19642373959677558725722690269321901723742485046387f,
            -0.34675996133053693659675786875595804303884506225586f,
            0.06897484482073573675009470207442063838243484497070f,
            0.29396890060483971129912106334813870489597320556641f,
            -0.29396890060483971129912106334813870489597320556641f,
            -0.06897484482073573675009470207442063838243484497070f,
            0.34675996133053693659675786875595804303884506225586f,
            -0.19642373959677558725722690269321901723742485046387f,
            -0.19642373959677558725722690269321901723742485046387f,
            0.34675996133053693659675786875595804303884506225586f,
            -0.06897484482073573675009470207442063838243484497070f,
            -0.29396890060483971129912106334813870489597320556641f,
            0.29396890060483971129912106334813870489597320556641f,
            0.06897484482073573675009470207442063838243484497070f,
            -0.34675996133053693659675786875595804303884506225586f,
            0.19642373959677558725722690269321901723742485046387f
        },
        {
            0.16666391461943669272116608226497191935777664184570f,
            -0.35185093438159559253719521620951127260923385620117f,
            0.22429189658565901188680413724796380847692489624023f,
            0.10263113188058929636792271367085049860179424285889f,
            -0.33832950029358821453229211329016834497451782226562f,
            0.27330046675043939696791994720115326344966888427734f,
            0.03465429229977293190678722112352261319756507873535f,
            -0.31180625324666777498094916154514066874980926513672f,
            0.31180625324666777498094916154514066874980926513672f,
            -0.03465429229977293190678722112352261319756507873535f,
            -0.27330046675043939696791994720115326344966888427734f,
            0.33832950029358821453229211329016834497451782226562f,
            -0.10263113188058929636792271367085049860179424285889f,
            -0.22429189658565901188680413724796380847692489624023f,
            0.35185093438159559253719521620951127260923385620117f,
            -0.16666391461943669272116608226497191935777664184570f
        },
        {
            0.13529902503654928080933927958540152758359909057617f,
            -0.32664074121909414394338000420248135924339294433594f,
            0.32664074121909414394338000420248135924339294433594f,
            -0.13529902503654928080933927958540152758359909057617f,
            -0.13529902503654928080933927958540152758359909057617f,
            0.32664074121909414394338000420248135924339294433594f,
            -0.32664074121909414394338000420248135924339294433594f,
            0.13529902503654928080933927958540152758359909057617f,
            0.13529902503654928080933927958540152758359909057617f,
            -0.32664074121909414394338000420248135924339294433594f,
            0.32664074121909414394338000420248135924339294433594f,
            -0.13529902503654928080933927958540152758359909057617f,
            -0.13529902503654928080933927958540152758359909057617f,
            0.32664074121909414394338000420248135924339294433594f,
            -0.32664074121909414394338000420248135924339294433594f,
            0.13529902503654928080933927958540152758359909057617f
        },
        {
            0.10263113188058933800128613711422076448798179626465f,
            -0.27330046675043939696791994720115326344966888427734f,
            0.35185093438159564804834644746733829379081726074219f,
            -0.31180625324666788600325162406079471111297607421875f,
            0.16666391461943666496559046663605840876698493957520f,
            0.03465429229977289027342379768015234731137752532959f,
            -0.22429189658565906739795536850579082965850830078125f,
            0.33832950029358821453229211329016834497451782226562f,
            -0.33832950029358821453229211329016834497451782226562f,
            0.22429189658565906739795536850579082965850830078125f,
            -0.03465429229977289027342379768015234731137752532959f,
            -0.16666391461943666496559046663605840876698493957520f,
            0.31180625324666788600325162406079471111297607421875f,
            -0.35185093438159564804834644746733829379081726074219f,
            0.27330046675043939696791994720115326344966888427734f,
            -0.10263113188058933800128613711422076448798179626465f
        },
        {
            0.06897484482073577838345812551779090426862239837646f,
            -0.19642373959677555950165128706430550664663314819336f,
            0.29396890060483971129912106334813870489597320556641f,
            -0.34675996133053688108560663749813102185726165771484f,
            0.34675996133053688108560663749813102185726165771484f,
            -0.29396890060483971129912106334813870489597320556641f,
            0.19642373959677555950165128706430550664663314819336f,
            -0.06897484482073577838345812551779090426862239837646f,
            -0.06897484482073577838345812551779090426862239837646f,
            0.19642373959677555950165128706430550664663314819336f,
            -0.29396890060483971129912106334813870489597320556641f,
            0.34675996133053688108560663749813102185726165771484f,
            -0.34675996133053688108560663749813102185726165771484f,
            0.29396890060483971129912106334813870489597320556641f,
            -0.19642373959677555950165128706430550664663314819336f,
            0.06897484482073577838345812551779090426862239837646f
        },
        {
            0.03465429229977292496789331721629423554986715316772f,
            -0.10263113188058928249013490585639374330639839172363f,
            0.16666391461943666496559046663605840876698493957520f,
            -0.22429189658565903964237975287687731906771659851074f,
            0.27330046675043939696791994720115326344966888427734f,
            -0.31180625324666771946979793028731364756822586059570f,
            0.33832950029358815902114088203234132379293441772461f,
            -0.35185093438159559253719521620951127260923385620117f,
            0.35185093438159559253719521620951127260923385620117f,
            -0.33832950029358815902114088203234132379293441772461f,
            0.31180625324666771946979793028731364756822586059570f,
            -0.27330046675043939696791994720115326344966888427734f,
            0.22429189658565903964237975287687731906771659851074f,
            -0.16666391461943666496559046663605840876698493957520f,
            0.10263113188058928249013490585639374330639839172363f,
            -0.03465429229977292496789331721629423554986715316772f
        }
    };

    private static final float[][] DCTbasis8 = {
            {       0.35355339059327373085750423342688009142875671386719f,
                    0.35355339059327373085750423342688009142875671386719f,
                    0.35355339059327373085750423342688009142875671386719f,
                    0.35355339059327373085750423342688009142875671386719f,
                    0.35355339059327373085750423342688009142875671386719f,
                    0.35355339059327373085750423342688009142875671386719f,
                    0.35355339059327373085750423342688009142875671386719f,
                    0.35355339059327373085750423342688009142875671386719f,
            },

            {       0.49039264020161521528962111915461719036102294921875f,
                    0.41573480615127261783570133957255166023969650268555f,
                    0.27778511650980114433551193542371038347482681274414f,
                    0.09754516100806412404189416065491968765854835510254f,
                    -0.09754516100806412404189416065491968765854835510254f,
                    -0.27778511650980114433551193542371038347482681274414f,
                    -0.41573480615127261783570133957255166023969650268555f,
                    -0.49039264020161521528962111915461719036102294921875f,
            },

            {       0.46193976625564336924156805253005586564540863037109f,
                    0.19134171618254489088961634024599334225058555603027f,
                    -0.19134171618254489088961634024599334225058555603027f,
                    -0.46193976625564336924156805253005586564540863037109f,
                    -0.46193976625564336924156805253005586564540863037109f,
                    -0.19134171618254489088961634024599334225058555603027f,
                    0.19134171618254489088961634024599334225058555603027f,
                    0.46193976625564336924156805253005586564540863037109f,
            },

            {       0.41573480615127261783570133957255166023969650268555f,
                    -0.09754516100806417955304539191274670884013175964355f,
                    -0.49039264020161521528962111915461719036102294921875f,
                    -0.27778511650980108882436070416588336229324340820312f,
                    0.27778511650980108882436070416588336229324340820312f,
                    0.49039264020161521528962111915461719036102294921875f,
                    0.09754516100806417955304539191274670884013175964355f,
                    -0.41573480615127261783570133957255166023969650268555f,
            },

            {       0.35355339059327378636865546468470711261034011840820f,
                    -0.35355339059327378636865546468470711261034011840820f,
                    -0.35355339059327378636865546468470711261034011840820f,
                    0.35355339059327378636865546468470711261034011840820f,
                    0.35355339059327378636865546468470711261034011840820f,
                    -0.35355339059327378636865546468470711261034011840820f,
                    -0.35355339059327378636865546468470711261034011840820f,
                    0.35355339059327378636865546468470711261034011840820f,
            },

            {       0.27778511650980114433551193542371038347482681274414f,
                    -0.49039264020161532631192358167027123272418975830078f,
                    0.09754516100806412404189416065491968765854835510254f,
                    0.41573480615127261783570133957255166023969650268555f,
                    -0.41573480615127261783570133957255166023969650268555f,
                    -0.09754516100806412404189416065491968765854835510254f,
                    0.49039264020161532631192358167027123272418975830078f,
                    -0.27778511650980114433551193542371038347482681274414f,
            },

            {       0.19134171618254491864519195587490685284137725830078f,
                    -0.46193976625564336924156805253005586564540863037109f,
                    0.46193976625564336924156805253005586564540863037109f,
                    -0.19134171618254491864519195587490685284137725830078f,
                    -0.19134171618254491864519195587490685284137725830078f,
                    0.46193976625564336924156805253005586564540863037109f,
                    -0.46193976625564336924156805253005586564540863037109f,
                    0.19134171618254491864519195587490685284137725830078f,
            },

            {       0.09754516100806416567525758409828995354473590850830f,
                    -0.27778511650980108882436070416588336229324340820312f,
                    0.41573480615127267334685257083037868142127990722656f,
                    -0.49039264020161521528962111915461719036102294921875f,
                    0.49039264020161521528962111915461719036102294921875f,
                    -0.41573480615127267334685257083037868142127990722656f,
                    0.27778511650980108882436070416588336229324340820312f,
                    -0.09754516100806416567525758409828995354473590850830f
            }
    };



    private static void DCT1D(float[] in, float[] out, int flag) {
        int PATCHSIZE = 16;

        // forward transform
        if ( flag == 1 ) {
            for (int j = 0; j < PATCHSIZE; j ++) {
                out[j] = 0;
                for (int i = 0; i < PATCHSIZE; i ++) {
                    out[j] += in[i] * DCTbasis16[j][i];
                }
            }
        }
        // reverse transform
        else if (flag == -1) {
            for (int j = 0; j < PATCHSIZE; j ++) {
                out[j] = 0;
                for (int i = 0; i < PATCHSIZE; i ++) {
                    out[j] += in[i] * DCTbasis16[i][j];
                }
            }
        } else {
            System.out.println("Flag should be 1 or -1");
        }
    }

    public static void CalculateDCT2D(float[][] patch, int flag) {
        int PATCHSIZE = 16;

        float[][] tmp1 = new float[PATCHSIZE][PATCHSIZE];
        float[][] tmp2 = new float[PATCHSIZE][PATCHSIZE];

        // transform row by row
        for (int j = 0; j < PATCHSIZE; j ++) {
            DCT1D(patch[j], tmp1[j], flag);
        }

        // transform column by column
        // (by transposing the matrix,
        // transforming row by row, and
        // transposing again the matrix.)
        for (int j = 0; j < PATCHSIZE; j ++) {
            for (int i = 0; i < PATCHSIZE; i ++)
                tmp2[j][i] = tmp1[i][j];
        }
        for (int j = 0; j < PATCHSIZE; j ++) {
            DCT1D(tmp2[j], tmp1[j], flag);
        }
        for (int j = 0; j < PATCHSIZE; j ++) {
            for (int i = 0; i < PATCHSIZE; i ++)
                patch[j][i] = tmp1[i][j];
        }
    }

    //1D DCT 8x8 patches flag 1/-1
    private static void DCT1D8(float[] in, float[] out, int flag) {
        int PATCHSIZE2 = 8;

        // forward transform
        if ( flag == 1 ) {
            for (int j = 0; j < PATCHSIZE2; j ++) {
                out[j] = 0;
                for (int i = 0; i < PATCHSIZE2; i ++) {
                    out[j] += in[i] * DCTbasis8[j][i];
                }
            }
        }
        // reverse transform
        else if (flag == -1) {
            for (int j = 0; j < PATCHSIZE2; j ++) {
                out[j] = 0;
                for (int i = 0; i < PATCHSIZE2; i ++) {
                    out[j] += in[i] * DCTbasis8[i][j];
                }
            }
        } else {
            System.out.println("Flag should be 1 or -1");
        }
    }

    //2D DCT 8x8 patches flag 1/-1
    public static void CalculateDCT2D8(float[][] patch, int flag) {
        int PATCHSIZE2 = 8;

        float[][] tmp1 = new float[PATCHSIZE2][PATCHSIZE2];
        float[][] tmp2 = new float[PATCHSIZE2][PATCHSIZE2];

        // transform row by row
        for (int j = 0; j < PATCHSIZE2; j ++) {
            DCT1D8(patch[j], tmp1[j], flag);
        }

        for (int j = 0; j < PATCHSIZE2; j ++) {
            for (int i = 0; i < PATCHSIZE2; i ++)
                tmp2[j][i] = tmp1[i][j];
        }
        for (int j = 0; j < PATCHSIZE2; j ++) {
            DCT1D8(tmp2[j], tmp1[j], flag);
        }
        for (int j = 0; j < PATCHSIZE2; j ++) {
            for (int i = 0; i < PATCHSIZE2; i ++)
                patch[j][i] = tmp1[i][j];
        }
    }



}
